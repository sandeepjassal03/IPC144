*****************************************************************************
                               Reflection
                             Workshop - #4
Full Name  : Sandeep Singh
Student ID#: 162054217
Email      : ssingh1224@myseneca.ca
Section    : NGG

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1. Selection in simple terms means asking a question or making a decision. This is indeed an important concept in programming because many times we face scenarios where there are two routes to a problem. In order to achieve one route, a decision has to be made and that is when selection comes into play. I will cite three examples from my part-2 as below:

1.1 if (number_of_oranges != 0) 
    {
      do
	{
	   ...block of code;			
	}while(condition);
    }
    code continued...

In this case, the do-while loop will only be executed if the user entered number_of_oranges is a value not equal to 0. Otherwise, the solution will proceed without executing this block of code. This is a type of optional selection where the code is executed only if the condition is met.

1.2 if (oranges_picked > number_of_oranges)
    {
       printf("You picked too many... only %d more ORANGE(S) are needed.\n", number_of_oranges);
    }
    else if (oranges_picked < number_of_oranges)
    {
       number_of_oranges -= oranges_picked;
       printf("Looks like we still need some ORANGES...\n");
    }
    else if (oranges_picked == number_of_oranges)
    {
       printf("Great, that's the oranges done!\n\n");
       flag = 1;
    }

Here, the decision is to be made on the basis of comparing the oranges_picked and the number_of_oranges to be picked. Hence, it becomes quite important to make a decision here because the problem would remain unsolved if the required decision based on the conditions is not executed. This is a type of multiple selection where multiple conditions are checked to make a correct decision.

1.3 do
    {
	statements of code...
	printf("Do another shopping? (0=NO): ");
	scanf(" %d", & another_shop);
    } while(another_shop != 0);

In this selection scenario, the user has an option of either continuing shopping or ending the shopping. At this stage again, some decision needs to be made otherwise the do-while loop would go on forever until the user makes a decision. This is a type of alternative selection where the user has 2 options for a decision.

2. When one logic sequence is enclosed in another logic sequence, we call it a nested construct. The logic sequence might be a selection(if-else block) or an iteration(loops) or a combination of both. This type of structure makes it easier for a programmer to debug and edit since it results in shorter and easy-to-understand code.
The examples are as under:

2.1 
     if (number_of_apples != 0)
        {
            do
            {
                printf("Pick some APPLES... how many did you pick? : ");
                scanf(" %d", &apples_picked);

		    statements of code...
                
            } while (flag == 0);
        }

The above nested construct is a combination of selection and iteration sequence. Here, as we reach the if statement, it checks the first condition if the variable number_of_apples is zero or not. In case it is zero, the inner block of code is not executed. However, if it is not equal to zero, the control enters the if statement. As soon as the control enters the if statement, it also enters the do-while loop since it is an exit-controlled loop, i.e., it first executes the inner statements and then checks the condition. If the condition is true, the loop executes over and over again until the condition turns false. As soon as the control exits the loop, it also exits the if block since there is no other statement. 

2.2 
 	if (apples_picked > 0)
      {
         if (apples_picked > number_of_apples)
         {
            printf("You picked too many... only %d more APPLE(S) are needed.\n", number_of_apples);
         }
         else if (apples_picked < number_of_apples)
         {
            number_of_apples -= apples_picked;
            printf("Looks like we still need some APPLES...\n");
         }
         else if (apples_picked == number_of_apples)
         {
            printf("Great, that's the apples done!\n\n");
            flag = 1;
         }
      }
      else
      {
         printf("ERROR: You must pick at least 1!\n");
      }

The above nested construct is a selection construct. In this case, the outermost if statement is checked before testing the conditions inside the block. Here, if the variable apples_picked is less than zero, the control does not enter the if block and rather transfers to the else block where it is executed. If the variable apples_picked is greater than zero, the control moves inside the if block where it finds another set of if-else if statements. Now, the multiple conditions are checked to match the true condition. For instance, in case the if block is false, the next else if is executed and the control shifts on until the true condition is found. Once it is found, it is executed immediately.

3. My favourite iteration construct is a do-while construct or simply a do-while loop. It is so because this loop offers everything that the other loops offer with some additional features as well. It is due to the following reasons:

	(i)This loop is an exit controlled loop which means that the loop at least runs once whatever the condition might be as compared to other loops such as while and for where the condition is tested prior to its execution.
	(ii) Moreover, when compared to for loop, this loop is capable of running without the need of using any iterating variable which is a requirement of the for loop.

An example from part-2 to support my argument is below:

do
{
  printf("How many APPLES do you need? : ");
  scanf(" %d", &number_of_apples);
 
  if (number_of_apples < 0)
  {
     printf("ERROR: Value must be 0 or more.\n");
  }
} while (flag == 0);

Here in this snippet from my part-2 code, I used the do-while loop to fulfill the task which could also have been achieved by for and while loop. 

(i)To use a while loop, I would first have to initiate the number_of_apples variable to 0 in order to proceed further in the code.
(ii)The for loop is a bit longer and takes an extra iterating variable to work properly. It is difficult to think about how the loop is supposed to work. But this is not the case with the do-while loop.

Due to the above reasons, I prefer to use the do-while loop as it has some advantages over the other loops.








